{"version":3,"sources":["svg4everybody.js"],"names":["root","factory","define","amd","svg4everybody","module","exports","this","embed","parent","svg","target","fragment","document","createDocumentFragment","viewBox","hasAttribute","getAttribute","setAttribute","clone","cloneNode","childNodes","length","appendChild","firstChild","loadreadystatechange","xhr","onreadystatechange","readyState","cachedDocument","_cachedDocument","implementation","createHTMLDocument","body","innerHTML","responseText","_cachedTarget","_embeds","splice","map","item","id","getElementById","getSVGAncestor","node","nodeName","toLowerCase","parentNode","rawopts","oninterval","index","uses","use","src","opts","attributeName","polyfill","validate","removeChild","srcSplit","split","url","shift","join","requests","XMLHttpRequest","open","send","push","numberOfSvgUseElementsToBypass","requestAnimationFrame","Object","newerIEUA","webkitUA","olderEdgeUA","edgeUA","inIframe","window","top","self","test","navigator","userAgent","match","setTimeout","getElementsByTagName"],"mappings":"CAAA,SAAAA,EAAAC,GACA,mBAAAC,QAAAA,OAAAC,IACAD,UAAA,WACA,OAAAF,EAAAI,cAAAH,MACA,iBAAAI,QAAAA,OAAAC,QAGAD,OAAAC,QAAAL,IAAAD,EAAAI,cAAAH,IAPA,CAQAM,KAAA,WAEA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAA,EAAA,CAEA,IAAAC,EAAAC,SAAAC,yBAAAC,GAAAL,EAAAM,aAAA,YAAAL,EAAAM,aAAA,WAEAF,GAAAL,EAAAQ,aAAA,UAAAH,GAEA,IACA,IAAAI,EAAAR,EAAAS,WAAA,GAAAD,EAAAE,WAAAC,QACAV,EAAAW,YAAAJ,EAAAK,YAGAf,EAAAc,YAAAX,IAGA,SAAAa,EAAAC,GAEAA,EAAAC,mBAAA,WAEA,GAAA,IAAAD,EAAAE,WAAA,CAEA,IAAAC,EAAAH,EAAAI,gBAEAD,IAAAA,EAAAH,EAAAI,gBAAAjB,SAAAkB,eAAAC,mBAAA,IACAH,EAAAI,KAAAC,UAAAR,EAAAS,aAAAT,EAAAU,kBACAV,EAAAW,QAAAC,OAAA,GAAAC,IAAA,SAAAC,GAEA,IAAA7B,EAAAe,EAAAU,cAAAI,EAAAC,IAEA9B,IAAAA,EAAAe,EAAAU,cAAAI,EAAAC,IAAAZ,EAAAa,eAAAF,EAAAC,KAEAjC,EAAAgC,EAAA/B,OAAA+B,EAAA9B,IAAAC,OAIAe,EAAAC,qBAuDA,SAAAgB,EAAAC,GACA,IAAA,IAAAlC,EAAAkC,EAAA,QAAAlC,EAAAmC,SAAAC,gBAAApC,EAAAA,EAAAqC,cACA,OAAArC,EAEA,OAzDA,SAAAsC,GACA,SAAAC,IAEA,IACA,IAAAC,EAAA,EAAAA,EAAAC,EAAA7B,QAAA,CAEA,IAAA8B,EAAAD,EAAAD,GAAAzC,EAAA2C,EAAAL,WAAArC,EAAAiC,EAAAlC,GACA,GAAAC,EAAA,CACA,IAAA2C,EAAAD,EAAAnC,aAAA,eAAAmC,EAAAnC,aAAA,QAEA,IADAoC,GAAAC,EAAAC,gBAAAF,EAAAD,EAAAnC,aAAAqC,EAAAC,gBACAC,EACA,IAAAF,EAAAG,UAAAH,EAAAG,SAAAJ,EAAA3C,EAAA0C,GAAA,CAEA3C,EAAAiD,YAAAN,GAEA,IAAAO,EAAAN,EAAAO,MAAA,KAAAC,EAAAF,EAAAG,QAAArB,EAAAkB,EAAAI,KAAA,KAEA,GAAAF,EAAAvC,OAAA,CAEA,IAAAI,EAAAsC,EAAAH,GAEAnC,KAAAA,EAAAsC,EAAAH,GAAA,IAAAI,gBAAAC,KAAA,MAAAL,GAAAnC,EAAAyC,OACAzC,EAAAW,YACAX,EAAAW,QAAA+B,MACA3D,OAAAA,EACAC,IAAAA,EACA+B,GAAAA,IAEAhB,EAAAC,QAGAlB,EAAAC,EAAAC,EAAAG,SAAA6B,eAAAD,UAIAS,IAAAmB,QAKAnB,IAIAC,EAAA7B,QAAA6B,EAAA7B,OAAA+C,EAAA,IAAAC,EAAArB,EAAA,IAEA,IAAAO,EAAAF,EAAAiB,OAAAvB,GAAAwB,EAAA,0CAAAC,EAAA,yBAAAC,EAAA,sBAAAC,EAAA,mBAAAC,EAAAC,OAAAC,MAAAD,OAAAE,KACAvB,EAAA,aAAAF,EAAAA,EAAAE,SAAAgB,EAAAQ,KAAAC,UAAAC,aAAAD,UAAAC,UAAAC,MAAAT,QAAA,GAAA,QAAAO,UAAAC,UAAAC,MAAAV,QAAA,GAAA,KAAAE,EAAAK,KAAAC,UAAAC,YAAAN,EAEA,IAAAZ,KAAAM,EAAAO,OAAAP,uBAAAc,WAAAjC,EAAAtC,SAAAwE,qBAAA,OAAAhB,EAAA,EAEAb,GAAAP","file":"vendor.min.js","sourcesContent":["!function(root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function() {\n        return root.svg4everybody = factory();\n    }) : \"object\" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.8 | github.com/jonathantneal/svg4everybody */\n    function embed(parent, svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            parent.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.parent, item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent);\n                if (svg) {\n                    var src = use.getAttribute(\"xlink:href\") || use.getAttribute(\"href\");\n                    !src && opts.attributeName && (src = use.getAttribute(opts.attributeName));\n                    if (polyfill) {\n                        if (!opts.validate || opts.validate(src, svg, use)) {\n                            // remove the <use> element\n                            parent.removeChild(use);\n                            // parse the src and get the url and id\n                            var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                            // if the link is external\n                            if (url.length) {\n                                // get the cached xhr request\n                                var xhr = requests[url];\n                                // ensure the xhr request exists\n                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                                xhr._embeds.push({\n                                    parent: parent,\n                                    svg: svg,\n                                    id: id\n                                }), // prepare the xhr ready state change event\n                                loadreadystatechange(xhr);\n                            } else {\n                                // embed the local id into the svg\n                                embed(parent, svg, document.getElementById(id));\n                            }\n                        } else {\n                            // increase the index when the previous value was not \"valid\"\n                            ++index, ++numberOfSvgUseElementsToBypass;\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/, edgeUA = /\\bEdge\\/.(\\d+)\\b/, inIframe = window.top !== window.self;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\"), numberOfSvgUseElementsToBypass = 0;\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    function getSVGAncestor(node) {\n        for (var svg = node; \"svg\" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}\n        return svg;\n    }\n    return svg4everybody;\n});"]}